/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.0B, Date: 18-Oct-2006.
 */
#ifndef NS9_H
#define NS9_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtbersrc/asn1ber.h"
#include "rtsrc/asn1type.h"
#include "rtxmlsrc/asn1xml.h"
#include "libxml/parser.h"
#include "Ns11.h"
#include "Xlink.h"

/**
 * Header file for ASN.1 module Ns9
 */
/**************************************************************/
/*                                                            */
/*  Animate                                                   */
/*                                                            */
/**************************************************************/

#define TV_Animate	(TM_UNIV|TM_CONS|16)

typedef struct EXTERN Animate {
   struct {
      unsigned formulaPresent : 1;
      unsigned sub_itemPresent : 1;
      unsigned accumulatePresent : 1;
      unsigned additivePresent : 1;
      unsigned byPresent : 1;
      unsigned calcModePresent : 1;
      unsigned fillPresent : 1;
      unsigned fromPresent : 1;
      unsigned keySplinesPresent : 1;
      unsigned keyTimesPresent : 1;
      unsigned repeatCountPresent : 1;
      unsigned repeatDurPresent : 1;
      unsigned targetElementPresent : 1;
      unsigned toPresent : 1;
      unsigned valuesPresent : 1;
   } m;
   const OSUTF8CHAR* formula;
   const OSUTF8CHAR* sub_item;
   Ns11_Accumulate accumulate;
   Ns11_Additive additive;
   Ns11_AttributeName attributeName;
   Ns11_By by;
   Ns11_CalcMode calcMode;
   Ns11_Fill fill;
   Ns11_From from;
   Ns11_KeySplines keySplines;
   Ns11_KeyTimes keyTimes;
   Ns11_RepeatCount repeatCount;
   Ns11_RepeatDur repeatDur;
   Ns11_TargetElement targetElement;
   Ns11_To to;
   Ns11_Values values;
} Animate;

EXTERN int asn1E_Animate (OSCTXT* pctxt,
   Animate *pvalue, ASN1TagType tagging);

EXTERN int asn1D_Animate (OSCTXT* pctxt, Animate *pvalue, ASN1TagType tagging, 
   int length);

EXTERN int XmlEnc_Animate (OSCTXT* pctxt, Animate* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Animate (OSCTXT* pctxt, Animate* pvalue);

EXTERN int DOMTest_Animate (OSCTXT* pctxt, Animate* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_Animate (Animate* pvalue);

/**************************************************************/
/*                                                            */
/*  Set                                                       */
/*                                                            */
/**************************************************************/

#define TV_Set	(TM_UNIV|TM_CONS|16)

typedef struct EXTERN Set {
   struct {
      unsigned sub_itemPresent : 1;
      unsigned accumulatePresent : 1;
      unsigned additivePresent : 1;
      unsigned fillPresent : 1;
      unsigned targetElementPresent : 1;
      unsigned toPresent : 1;
   } m;
   const OSUTF8CHAR* sub_item;
   Ns11_Accumulate accumulate;
   Ns11_Additive additive;
   Ns11_AttributeName attributeName;
   Ns11_Fill fill;
   Ns11_TargetElement targetElement;
   Ns11_To to;
} Set;

EXTERN int asn1E_Set (OSCTXT* pctxt,
   Set *pvalue, ASN1TagType tagging);

EXTERN int asn1D_Set (OSCTXT* pctxt, Set *pvalue, ASN1TagType tagging, 
   int length);

EXTERN int XmlEnc_Set (OSCTXT* pctxt, Set* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Set (OSCTXT* pctxt, Set* pvalue);

EXTERN int DOMTest_Set (OSCTXT* pctxt, Set* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_Set (Set* pvalue);

/**************************************************************/
/*                                                            */
/*  AnimateMotion                                             */
/*                                                            */
/**************************************************************/

#define TV_AnimateMotion	(TM_UNIV|TM_CONS|16)

typedef struct EXTERN AnimateMotion {
   struct {
      unsigned formulaPresent : 1;
      unsigned sub_itemPresent : 1;
      unsigned accumulatePresent : 1;
      unsigned additivePresent : 1;
      unsigned byPresent : 1;
      unsigned calcModePresent : 1;
      unsigned fillPresent : 1;
      unsigned fromPresent : 1;
      unsigned keySplinesPresent : 1;
      unsigned keyTimesPresent : 1;
      unsigned targetElementPresent : 1;
      unsigned toPresent : 1;
      unsigned valuesPresent : 1;
      unsigned originPresent : 1;
      unsigned pathPresent : 1;
   } m;
   const OSUTF8CHAR* formula;
   const OSUTF8CHAR* sub_item;
   Ns11_Accumulate accumulate;
   Ns11_Additive additive;
   Ns11_AttributeName attributeName;
   Ns11_By by;
   Ns11_CalcMode calcMode;
   Ns11_Fill fill;
   Ns11_From from;
   Ns11_KeySplines keySplines;
   Ns11_KeyTimes keyTimes;
   Ns11_TargetElement targetElement;
   Ns11_To to;
   Ns11_Values values;
   const OSUTF8CHAR* origin;
   const OSUTF8CHAR* path;
} AnimateMotion;

EXTERN int asn1E_AnimateMotion (OSCTXT* pctxt,
   AnimateMotion *pvalue, ASN1TagType tagging);

EXTERN int asn1D_AnimateMotion (OSCTXT* pctxt, AnimateMotion *pvalue, 
   ASN1TagType tagging, int length);

EXTERN int XmlEnc_AnimateMotion (OSCTXT* pctxt, AnimateMotion* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AnimateMotion (OSCTXT* pctxt, AnimateMotion* pvalue);

EXTERN int DOMTest_AnimateMotion (OSCTXT* pctxt, AnimateMotion* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_AnimateMotion (AnimateMotion* pvalue);

/**************************************************************/
/*                                                            */
/*  AnimateColor_color_interpolation                          */
/*                                                            */
/**************************************************************/

#define TV_AnimateColor_color_interpolation	(TM_UNIV|TM_PRIM|10)

typedef enum {
   color_interpolation_hsl = 0,
   color_interpolation_rgb = 1
} AnimateColor_color_interpolation_Root;

typedef OSUINT32 AnimateColor_color_interpolation;

EXTERN int asn1E_AnimateColor_color_interpolation (OSCTXT* pctxt,
   AnimateColor_color_interpolation *pvalue, ASN1TagType tagging);

EXTERN int asn1D_AnimateColor_color_interpolation (OSCTXT* pctxt, 
   AnimateColor_color_interpolation *pvalue, ASN1TagType tagging, int length);

EXTERN int XmlEnc_AnimateColor_color_interpolation (OSCTXT* pctxt, 
   AnimateColor_color_interpolation value, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AnimateColor_color_interpolation (OSCTXT* pctxt, 
   AnimateColor_color_interpolation* pvalue);

EXTERN const OSUTF8CHAR* AnimateColor_color_interpolation_ToString (OSINT32 value);

EXTERN int AnimateColor_color_interpolation_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, AnimateColor_color_interpolation* pvalue);

/**************************************************************/
/*                                                            */
/*  AnimateColor_color_interpolation_direction                */
/*                                                            */
/**************************************************************/

#define TV_AnimateColor_color_interpolation_direction	(TM_UNIV|TM_PRIM|10)

typedef enum {
   color_interpolation_direction_clockwise = 0,
   color_interpolation_direction_counter_clockwise = 1
} AnimateColor_color_interpolation_direction_Root;

typedef OSUINT32 AnimateColor_color_interpolation_direction;

EXTERN int asn1E_AnimateColor_color_interpolation_direction (OSCTXT* pctxt,
   AnimateColor_color_interpolation_direction *pvalue, ASN1TagType tagging);

EXTERN int asn1D_AnimateColor_color_interpolation_direction (OSCTXT* pctxt, 
   AnimateColor_color_interpolation_direction *pvalue, ASN1TagType tagging, 
   int length);

EXTERN int XmlEnc_AnimateColor_color_interpolation_direction (OSCTXT* pctxt, 
   AnimateColor_color_interpolation_direction value, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AnimateColor_color_interpolation_direction (OSCTXT* pctxt, 
   AnimateColor_color_interpolation_direction* pvalue);

EXTERN const OSUTF8CHAR* AnimateColor_color_interpolation_direction_ToString (OSINT32 value);

EXTERN int AnimateColor_color_interpolation_direction_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, AnimateColor_color_interpolation_direction* pvalue)
      ;

/**************************************************************/
/*                                                            */
/*  AnimateColor                                              */
/*                                                            */
/**************************************************************/

#define TV_AnimateColor	(TM_UNIV|TM_CONS|16)

typedef struct EXTERN AnimateColor {
   struct {
      unsigned color_interpolationPresent : 1;
      unsigned color_interpolation_directionPresent : 1;
      unsigned formulaPresent : 1;
      unsigned sub_itemPresent : 1;
      unsigned accumulatePresent : 1;
      unsigned additivePresent : 1;
      unsigned byPresent : 1;
      unsigned calcModePresent : 1;
      unsigned fillPresent : 1;
      unsigned fromPresent : 1;
      unsigned keySplinesPresent : 1;
      unsigned keyTimesPresent : 1;
      unsigned targetElementPresent : 1;
      unsigned toPresent : 1;
      unsigned valuesPresent : 1;
   } m;
   AnimateColor_color_interpolation color_interpolation;
   AnimateColor_color_interpolation_direction color_interpolation_direction;
   const OSUTF8CHAR* formula;
   const OSUTF8CHAR* sub_item;
   Ns11_Accumulate accumulate;
   Ns11_Additive additive;
   Ns11_AttributeName attributeName;
   Ns11_By by;
   Ns11_CalcMode calcMode;
   Ns11_Fill fill;
   Ns11_From from;
   Ns11_KeySplines keySplines;
   Ns11_KeyTimes keyTimes;
   Ns11_TargetElement targetElement;
   Ns11_To to;
   Ns11_Values values;
} AnimateColor;

EXTERN int asn1E_AnimateColor (OSCTXT* pctxt,
   AnimateColor *pvalue, ASN1TagType tagging);

EXTERN int asn1D_AnimateColor (OSCTXT* pctxt, AnimateColor *pvalue, 
   ASN1TagType tagging, int length);

EXTERN int XmlEnc_AnimateColor (OSCTXT* pctxt, AnimateColor* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AnimateColor (OSCTXT* pctxt, AnimateColor* pvalue);

EXTERN int DOMTest_AnimateColor (OSCTXT* pctxt, AnimateColor* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_AnimateColor (AnimateColor* pvalue);

/**************************************************************/
/*                                                            */
/*  AnimateTransform                                          */
/*                                                            */
/**************************************************************/

#define TV_AnimateTransform	(TM_UNIV|TM_CONS|16)

typedef struct EXTERN AnimateTransform {
   struct {
      unsigned formulaPresent : 1;
      unsigned sub_itemPresent : 1;
      unsigned accumulatePresent : 1;
      unsigned additivePresent : 1;
      unsigned byPresent : 1;
      unsigned fillPresent : 1;
      unsigned fromPresent : 1;
      unsigned targetElementPresent : 1;
      unsigned toPresent : 1;
      unsigned valuesPresent : 1;
   } m;
   const OSUTF8CHAR* formula;
   const OSUTF8CHAR* sub_item;
   Ns11_Accumulate accumulate;
   Ns11_Additive additive;
   Ns11_AttributeName attributeName;
   Ns11_By by;
   Ns11_Fill fill;
   Ns11_From from;
   Ns11_TargetElement targetElement;
   Ns11_To to;
   Ns11_Values values;
   OSUINT32 type;
} AnimateTransform;

EXTERN int asn1E_AnimateTransform (OSCTXT* pctxt,
   AnimateTransform *pvalue, ASN1TagType tagging);

EXTERN int asn1D_AnimateTransform (OSCTXT* pctxt, AnimateTransform *pvalue, 
   ASN1TagType tagging, int length);

EXTERN int XmlEnc_AnimateTransform (OSCTXT* pctxt, AnimateTransform* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_AnimateTransform (OSCTXT* pctxt, AnimateTransform* pvalue);

EXTERN int DOMTest_AnimateTransform (OSCTXT* pctxt, AnimateTransform* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_AnimateTransform (AnimateTransform* pvalue);

/**************************************************************/
/*                                                            */
/*  TransitionFilter                                          */
/*                                                            */
/**************************************************************/

#define TV_TransitionFilter	(TM_UNIV|TM_CONS|16)

typedef struct EXTERN TransitionFilter {
   struct {
      unsigned formulaPresent : 1;
      unsigned sub_itemPresent : 1;
      unsigned accumulatePresent : 1;
      unsigned additivePresent : 1;
      unsigned byPresent : 1;
      unsigned calcModePresent : 1;
      unsigned directionPresent : 1;
      unsigned fadeColorPresent : 1;
      unsigned fillPresent : 1;
      unsigned fromPresent : 1;
      unsigned modePresent : 1;
      unsigned subtypePresent : 1;
      unsigned targetElementPresent : 1;
      unsigned toPresent : 1;
      unsigned valuesPresent : 1;
   } m;
   const OSUTF8CHAR* formula;
   const OSUTF8CHAR* sub_item;
   Ns11_Accumulate accumulate;
   Ns11_Additive additive;
   Ns11_By by;
   Ns11_CalcMode calcMode;
   Ns11_Direction direction;
   Ns11_FadeColor fadeColor;
   Ns11_Fill fill;
   Ns11_From from;
   Ns11_Mode mode;
   Ns11_Subtype subtype;
   Ns11_TargetElement targetElement;
   Ns11_To to;
   Ns11_Type type;
   Ns11_Values values;
} TransitionFilter;

EXTERN int asn1E_TransitionFilter (OSCTXT* pctxt,
   TransitionFilter *pvalue, ASN1TagType tagging);

EXTERN int asn1D_TransitionFilter (OSCTXT* pctxt, TransitionFilter *pvalue, 
   ASN1TagType tagging, int length);

EXTERN int XmlEnc_TransitionFilter (OSCTXT* pctxt, TransitionFilter* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_TransitionFilter (OSCTXT* pctxt, TransitionFilter* pvalue);

EXTERN int DOMTest_TransitionFilter (OSCTXT* pctxt, TransitionFilter* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_TransitionFilter (TransitionFilter* pvalue);

/**************************************************************/
/*                                                            */
/*  Seq                                                       */
/*                                                            */
/**************************************************************/

#define TV_Seq	(TM_UNIV|TM_CONS|16)

typedef struct EXTERN Seq {
   struct {
      unsigned idPresent : 1;
      unsigned group_idPresent : 1;
      unsigned master_elementPresent : 1;
      unsigned node_typePresent : 1;
      unsigned preset_classPresent : 1;
      unsigned preset_idPresent : 1;
      unsigned preset_sub_typePresent : 1;
      unsigned acceleratePresent : 1;
      unsigned autoReversePresent : 1;
      unsigned beginPresent : 1;
      unsigned deceleratePresent : 1;
      unsigned durPresent : 1;
      unsigned endPresent : 1;
      unsigned endsyncPresent : 1;
      unsigned fillPresent : 1;
      unsigned fillDefaultPresent : 1;
      unsigned repeatCountPresent : 1;
      unsigned repeatDurPresent : 1;
      unsigned restartPresent : 1;
      unsigned restartDefaultPresent : 1;
   } m;
   const OSUTF8CHAR* id;
   const OSUTF8CHAR* group_id;
   const OSUTF8CHAR* master_element;
   OSUINT32 node_type;
   OSUINT32 preset_class;
   const OSUTF8CHAR* preset_id;
   const OSUTF8CHAR* preset_sub_type;
   Ns11_Accelerate accelerate;
   Ns11_AutoReverse autoReverse;
   Ns11_Begin begin;
   Ns11_Decelerate decelerate;
   Ns11_Dur dur;
   Ns11_End end;
   Ns11_Endsync endsync;
   Ns11_Fill fill;
   Ns11_FillDefault fillDefault;
   Ns11_RepeatCount repeatCount;
   Ns11_RepeatDur repeatDur;
   Ns11_Restart restart;
   Ns11_RestartDefault restartDefault;
} Seq;

EXTERN int asn1E_Seq (OSCTXT* pctxt,
   Seq *pvalue, ASN1TagType tagging);

EXTERN int asn1D_Seq (OSCTXT* pctxt, Seq *pvalue, ASN1TagType tagging, 
   int length);

EXTERN int XmlEnc_Seq (OSCTXT* pctxt, Seq* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Seq (OSCTXT* pctxt, Seq* pvalue);

EXTERN int DOMTest_Seq (OSCTXT* pctxt, Seq* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_Seq (Seq* pvalue);

/**************************************************************/
/*                                                            */
/*  Audio                                                     */
/*                                                            */
/**************************************************************/

#define TV_Audio	(TM_UNIV|TM_CONS|16)

typedef struct EXTERN Audio {
   struct {
      unsigned hrefPresent : 1;
      unsigned audio_levelPresent : 1;
      unsigned idPresent : 1;
      unsigned group_idPresent : 1;
      unsigned master_elementPresent : 1;
      unsigned node_typePresent : 1;
      unsigned preset_classPresent : 1;
      unsigned preset_idPresent : 1;
      unsigned preset_sub_typePresent : 1;
      unsigned beginPresent : 1;
      unsigned durPresent : 1;
      unsigned endPresent : 1;
      unsigned repeatCountPresent : 1;
      unsigned repeatDurPresent : 1;
   } m;
   Xlink_Href href;
   OSREAL audio_level;
   const OSUTF8CHAR* id;
   const OSUTF8CHAR* group_id;
   const OSUTF8CHAR* master_element;
   OSUINT32 node_type;
   OSUINT32 preset_class;
   const OSUTF8CHAR* preset_id;
   const OSUTF8CHAR* preset_sub_type;
   Ns11_Begin begin;
   Ns11_Dur dur;
   Ns11_End end;
   Ns11_RepeatCount repeatCount;
   Ns11_RepeatDur repeatDur;
} Audio;

EXTERN int asn1E_Audio (OSCTXT* pctxt,
   Audio *pvalue, ASN1TagType tagging);

EXTERN int asn1D_Audio (OSCTXT* pctxt, Audio *pvalue, ASN1TagType tagging, 
   int length);

EXTERN int XmlEnc_Audio (OSCTXT* pctxt, Audio* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Audio (OSCTXT* pctxt, Audio* pvalue);

EXTERN int DOMTest_Audio (OSCTXT* pctxt, Audio* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_Audio (Audio* pvalue);

/**************************************************************/
/*                                                            */
/*  Param                                                     */
/*                                                            */
/**************************************************************/

#define TV_Param	(TM_UNIV|TM_CONS|16)

typedef struct EXTERN Param {
   const OSUTF8CHAR* name;
   const OSUTF8CHAR* value;
} Param;

EXTERN int asn1E_Param (OSCTXT* pctxt,
   Param *pvalue, ASN1TagType tagging);

EXTERN int asn1D_Param (OSCTXT* pctxt, Param *pvalue, ASN1TagType tagging, 
   int length);

EXTERN int XmlEnc_Param (OSCTXT* pctxt, Param* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Param (OSCTXT* pctxt, Param* pvalue);

EXTERN int DOMTest_Param (OSCTXT* pctxt, Param* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_Param (Param* pvalue);

/**************************************************************/
/*                                                            */
/*  Command                                                   */
/*                                                            */
/**************************************************************/

#define TV_Command	(TM_UNIV|TM_CONS|16)

typedef struct EXTERN Command {
   struct {
      unsigned idPresent : 1;
      unsigned sub_itemPresent : 1;
      unsigned group_idPresent : 1;
      unsigned master_elementPresent : 1;
      unsigned node_typePresent : 1;
      unsigned preset_classPresent : 1;
      unsigned preset_idPresent : 1;
      unsigned preset_sub_typePresent : 1;
      unsigned beginPresent : 1;
      unsigned endPresent : 1;
      unsigned targetElementPresent : 1;
   } m;
   const OSUTF8CHAR* command;
   const OSUTF8CHAR* id;
   const OSUTF8CHAR* sub_item;
   const OSUTF8CHAR* group_id;
   const OSUTF8CHAR* master_element;
   OSUINT32 node_type;
   OSUINT32 preset_class;
   const OSUTF8CHAR* preset_id;
   const OSUTF8CHAR* preset_sub_type;
   Ns11_Begin begin;
   Ns11_End end;
   Ns11_TargetElement targetElement;
   /* List of Param */
   OSRTDList param_list;
} Command;

EXTERN int asn1E_Command (OSCTXT* pctxt,
   Command *pvalue, ASN1TagType tagging);

EXTERN int asn1D_Command (OSCTXT* pctxt, Command *pvalue, ASN1TagType tagging, 
   int length);

EXTERN int XmlEnc_Command (OSCTXT* pctxt, Command* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Command (OSCTXT* pctxt, Command* pvalue);

EXTERN int DOMTest_Command (OSCTXT* pctxt, Command* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_Command (Command* pvalue);

/**************************************************************/
/*                                                            */
/*  Iterate_element                                           */
/*                                                            */
/**************************************************************/

#define TV_Iterate_element	(TM_UNIV|TM_CONS|0)

/* Choice tag constants */

#define T_Iterate_element_animate       1
#define T_Iterate_element_set           2
#define T_Iterate_element_animateMotion 3
#define T_Iterate_element_animateColor  4
#define T_Iterate_element_animateTransform 5
#define T_Iterate_element_transitionFilter 6
#define T_Iterate_element_par           7
#define T_Iterate_element_seq           8
#define T_Iterate_element_iterate       9
#define T_Iterate_element_audio         10
#define T_Iterate_element_command       11

typedef struct EXTERN Iterate_element {
   int t;
   union {
      /* t = 1 */
      Animate *animate;
      /* t = 2 */
      Set *set;
      /* t = 3 */
      AnimateMotion *animateMotion;
      /* t = 4 */
      AnimateColor *animateColor;
      /* t = 5 */
      AnimateTransform *animateTransform;
      /* t = 6 */
      TransitionFilter *transitionFilter;
      /* t = 7 */
      struct Par *par;
      /* t = 8 */
      Seq *seq;
      /* t = 9 */
      struct Iterate *iterate;
      /* t = 10 */
      Audio *audio;
      /* t = 11 */
      Command *command;
   } u;
} Iterate_element;

EXTERN int asn1E_Iterate_element (OSCTXT* pctxt,
   Iterate_element *pvalue, ASN1TagType tagging);

EXTERN int asn1D_Iterate_element (OSCTXT* pctxt, Iterate_element *pvalue, 
   ASN1TagType tagging, int length);

EXTERN int XmlEnc_Iterate_element (OSCTXT* pctxt, Iterate_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Iterate_element (OSCTXT* pctxt, Iterate_element* pvalue);

EXTERN int DOMTest_Iterate_element (OSCTXT* pctxt, Iterate_element* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_Iterate_element (Iterate_element* pvalue);

/**************************************************************/
/*                                                            */
/*  Iterate                                                   */
/*                                                            */
/**************************************************************/

#define TV_Iterate	(TM_UNIV|TM_CONS|16)

typedef struct EXTERN Iterate {
   struct {
      unsigned idPresent : 1;
      unsigned iterate_intervalPresent : 1;
      unsigned iterate_typePresent : 1;
      unsigned group_idPresent : 1;
      unsigned master_elementPresent : 1;
      unsigned node_typePresent : 1;
      unsigned preset_classPresent : 1;
      unsigned preset_idPresent : 1;
      unsigned preset_sub_typePresent : 1;
      unsigned acceleratePresent : 1;
      unsigned autoReversePresent : 1;
      unsigned beginPresent : 1;
      unsigned deceleratePresent : 1;
      unsigned durPresent : 1;
      unsigned endPresent : 1;
      unsigned endsyncPresent : 1;
      unsigned fillPresent : 1;
      unsigned fillDefaultPresent : 1;
      unsigned repeatCountPresent : 1;
      unsigned repeatDurPresent : 1;
      unsigned restartPresent : 1;
      unsigned restartDefaultPresent : 1;
      unsigned targetElementPresent : 1;
   } m;
   const OSUTF8CHAR* id;
   const OSUTF8CHAR* iterate_interval;
   const OSUTF8CHAR* iterate_type;
   const OSUTF8CHAR* group_id;
   const OSUTF8CHAR* master_element;
   OSUINT32 node_type;
   OSUINT32 preset_class;
   const OSUTF8CHAR* preset_id;
   const OSUTF8CHAR* preset_sub_type;
   Ns11_Accelerate accelerate;
   Ns11_AutoReverse autoReverse;
   Ns11_Begin begin;
   Ns11_Decelerate decelerate;
   Ns11_Dur dur;
   Ns11_End end;
   Ns11_Endsync endsync;
   Ns11_Fill fill;
   Ns11_FillDefault fillDefault;
   Ns11_RepeatCount repeatCount;
   Ns11_RepeatDur repeatDur;
   Ns11_Restart restart;
   Ns11_RestartDefault restartDefault;
   Ns11_TargetElement targetElement;
   /* List of Iterate_element */
   OSRTDList choice_list;
} Iterate;

EXTERN int asn1E_Iterate (OSCTXT* pctxt,
   Iterate *pvalue, ASN1TagType tagging);

EXTERN int asn1D_Iterate (OSCTXT* pctxt, Iterate *pvalue, ASN1TagType tagging, 
   int length);

EXTERN int XmlEnc_Iterate (OSCTXT* pctxt, Iterate* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Iterate (OSCTXT* pctxt, Iterate* pvalue);

EXTERN int DOMTest_Iterate (OSCTXT* pctxt, Iterate* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_Iterate (Iterate* pvalue);

/**************************************************************/
/*                                                            */
/*  Par_element                                               */
/*                                                            */
/**************************************************************/

#define TV_Par_element	(TM_UNIV|TM_CONS|0)

/* Choice tag constants */

#define T_Par_element_animate           1
#define T_Par_element_set               2
#define T_Par_element_animateMotion     3
#define T_Par_element_animateColor      4
#define T_Par_element_animateTransform  5
#define T_Par_element_transitionFilter  6
#define T_Par_element_par               7
#define T_Par_element_seq               8
#define T_Par_element_iterate           9
#define T_Par_element_audio             10
#define T_Par_element_command           11

typedef struct EXTERN Par_element {
   int t;
   union {
      /* t = 1 */
      Animate *animate;
      /* t = 2 */
      Set *set;
      /* t = 3 */
      AnimateMotion *animateMotion;
      /* t = 4 */
      AnimateColor *animateColor;
      /* t = 5 */
      AnimateTransform *animateTransform;
      /* t = 6 */
      TransitionFilter *transitionFilter;
      /* t = 7 */
      struct Par *par;
      /* t = 8 */
      Seq *seq;
      /* t = 9 */
      Iterate *iterate;
      /* t = 10 */
      Audio *audio;
      /* t = 11 */
      Command *command;
   } u;
} Par_element;

EXTERN int asn1E_Par_element (OSCTXT* pctxt,
   Par_element *pvalue, ASN1TagType tagging);

EXTERN int asn1D_Par_element (OSCTXT* pctxt, Par_element *pvalue, 
   ASN1TagType tagging, int length);

EXTERN int XmlEnc_Par_element (OSCTXT* pctxt, Par_element* pvalue, 
   const OSUTF8CHAR* elemName, const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Par_element (OSCTXT* pctxt, Par_element* pvalue);

EXTERN int DOMTest_Par_element (OSCTXT* pctxt, Par_element* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_Par_element (Par_element* pvalue);

/**************************************************************/
/*                                                            */
/*  Par                                                       */
/*                                                            */
/**************************************************************/

#define TV_Par	(TM_UNIV|TM_CONS|16)

typedef struct EXTERN Par {
   struct {
      unsigned idPresent : 1;
      unsigned group_idPresent : 1;
      unsigned master_elementPresent : 1;
      unsigned node_typePresent : 1;
      unsigned preset_classPresent : 1;
      unsigned preset_idPresent : 1;
      unsigned preset_sub_typePresent : 1;
      unsigned acceleratePresent : 1;
      unsigned autoReversePresent : 1;
      unsigned beginPresent : 1;
      unsigned deceleratePresent : 1;
      unsigned durPresent : 1;
      unsigned endPresent : 1;
      unsigned endsyncPresent : 1;
      unsigned fillPresent : 1;
      unsigned fillDefaultPresent : 1;
      unsigned repeatCountPresent : 1;
      unsigned repeatDurPresent : 1;
      unsigned restartPresent : 1;
      unsigned restartDefaultPresent : 1;
   } m;
   const OSUTF8CHAR* id;
   const OSUTF8CHAR* group_id;
   const OSUTF8CHAR* master_element;
   OSUINT32 node_type;
   OSUINT32 preset_class;
   const OSUTF8CHAR* preset_id;
   const OSUTF8CHAR* preset_sub_type;
   Ns11_Accelerate accelerate;
   Ns11_AutoReverse autoReverse;
   Ns11_Begin begin;
   Ns11_Decelerate decelerate;
   Ns11_Dur dur;
   Ns11_End end;
   Ns11_Endsync endsync;
   Ns11_Fill fill;
   Ns11_FillDefault fillDefault;
   Ns11_RepeatCount repeatCount;
   Ns11_RepeatDur repeatDur;
   Ns11_Restart restart;
   Ns11_RestartDefault restartDefault;
   /* List of Par_element */
   OSRTDList choice_list;
} Par;

EXTERN int asn1E_Par (OSCTXT* pctxt,
   Par *pvalue, ASN1TagType tagging);

EXTERN int asn1D_Par (OSCTXT* pctxt, Par *pvalue, ASN1TagType tagging, 
   int length);

EXTERN int XmlEnc_Par (OSCTXT* pctxt, Par* pvalue, const OSUTF8CHAR* elemName, 
   const OSUTF8CHAR* nsPrefix);

EXTERN int XmlDec_Par (OSCTXT* pctxt, Par* pvalue);

EXTERN int DOMTest_Par (OSCTXT* pctxt, Par* pvalue, 
   xmlNodePtr pXmlNode, OSBOOL setChild);

EXTERN void asn1Init_Par (Par* pvalue);

#ifdef __cplusplus
}
#endif

#endif
